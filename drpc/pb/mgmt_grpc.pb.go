// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MgmtSvcClient is the client API for MgmtSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MgmtSvcClient interface {
	JoinNode(ctx context.Context, in *JoinNodeReq, opts ...grpc.CallOption) (*JoinNodeResp, error)
	DetachNode(ctx context.Context, in *DetachNodeReq, opts ...grpc.CallOption) (*DetachNodeResp, error)
}

type mgmtSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewMgmtSvcClient(cc grpc.ClientConnInterface) MgmtSvcClient {
	return &mgmtSvcClient{cc}
}

func (c *mgmtSvcClient) JoinNode(ctx context.Context, in *JoinNodeReq, opts ...grpc.CallOption) (*JoinNodeResp, error) {
	out := new(JoinNodeResp)
	err := c.cc.Invoke(ctx, "/mgmt.MgmtSvc/JoinNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtSvcClient) DetachNode(ctx context.Context, in *DetachNodeReq, opts ...grpc.CallOption) (*DetachNodeResp, error) {
	out := new(DetachNodeResp)
	err := c.cc.Invoke(ctx, "/mgmt.MgmtSvc/DetachNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MgmtSvcServer is the server API for MgmtSvc service.
// All implementations must embed UnimplementedMgmtSvcServer
// for forward compatibility
type MgmtSvcServer interface {
	JoinNode(context.Context, *JoinNodeReq) (*JoinNodeResp, error)
	DetachNode(context.Context, *DetachNodeReq) (*DetachNodeResp, error)
	mustEmbedUnimplementedMgmtSvcServer()
}

// UnimplementedMgmtSvcServer must be embedded to have forward compatible implementations.
type UnimplementedMgmtSvcServer struct {
}

func (UnimplementedMgmtSvcServer) JoinNode(context.Context, *JoinNodeReq) (*JoinNodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinNode not implemented")
}
func (UnimplementedMgmtSvcServer) DetachNode(context.Context, *DetachNodeReq) (*DetachNodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetachNode not implemented")
}
func (UnimplementedMgmtSvcServer) mustEmbedUnimplementedMgmtSvcServer() {}

// UnsafeMgmtSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MgmtSvcServer will
// result in compilation errors.
type UnsafeMgmtSvcServer interface {
	mustEmbedUnimplementedMgmtSvcServer()
}

func RegisterMgmtSvcServer(s grpc.ServiceRegistrar, srv MgmtSvcServer) {
	s.RegisterService(&MgmtSvc_ServiceDesc, srv)
}

func _MgmtSvc_JoinNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinNodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).JoinNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mgmt.MgmtSvc/JoinNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).JoinNode(ctx, req.(*JoinNodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtSvc_DetachNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetachNodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtSvcServer).DetachNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mgmt.MgmtSvc/DetachNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtSvcServer).DetachNode(ctx, req.(*DetachNodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MgmtSvc_ServiceDesc is the grpc.ServiceDesc for MgmtSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MgmtSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mgmt.MgmtSvc",
	HandlerType: (*MgmtSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JoinNode",
			Handler:    _MgmtSvc_JoinNode_Handler,
		},
		{
			MethodName: "DetachNode",
			Handler:    _MgmtSvc_DetachNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mgmt.proto",
}
