// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KvServiceClient is the client API for KvService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KvServiceClient interface {
	CreateSchema(ctx context.Context, in *CreateSchemaReq, opts ...grpc.CallOption) (*CreateSchemaResp, error)
	QuerySchema(ctx context.Context, in *QuerySchemaReq, opts ...grpc.CallOption) (*QuerySchemaResp, error)
	DeleteSchema(ctx context.Context, in *DeleteSchemaReq, opts ...grpc.CallOption) (*DeleteSchemaResp, error)
	PutConf(ctx context.Context, in *PutConfReq, opts ...grpc.CallOption) (*PutConfResp, error)
	GetConf(ctx context.Context, in *GetConfReq, opts ...grpc.CallOption) (*GetConfResp, error)
	DeleteConf(ctx context.Context, in *DeleteConfReq, opts ...grpc.CallOption) (*DeleteConfResp, error)
}

type kvServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKvServiceClient(cc grpc.ClientConnInterface) KvServiceClient {
	return &kvServiceClient{cc}
}

func (c *kvServiceClient) CreateSchema(ctx context.Context, in *CreateSchemaReq, opts ...grpc.CallOption) (*CreateSchemaResp, error) {
	out := new(CreateSchemaResp)
	err := c.cc.Invoke(ctx, "/kv.KvService/CreateSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvServiceClient) QuerySchema(ctx context.Context, in *QuerySchemaReq, opts ...grpc.CallOption) (*QuerySchemaResp, error) {
	out := new(QuerySchemaResp)
	err := c.cc.Invoke(ctx, "/kv.KvService/QuerySchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvServiceClient) DeleteSchema(ctx context.Context, in *DeleteSchemaReq, opts ...grpc.CallOption) (*DeleteSchemaResp, error) {
	out := new(DeleteSchemaResp)
	err := c.cc.Invoke(ctx, "/kv.KvService/DeleteSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvServiceClient) PutConf(ctx context.Context, in *PutConfReq, opts ...grpc.CallOption) (*PutConfResp, error) {
	out := new(PutConfResp)
	err := c.cc.Invoke(ctx, "/kv.KvService/PutConf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvServiceClient) GetConf(ctx context.Context, in *GetConfReq, opts ...grpc.CallOption) (*GetConfResp, error) {
	out := new(GetConfResp)
	err := c.cc.Invoke(ctx, "/kv.KvService/GetConf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvServiceClient) DeleteConf(ctx context.Context, in *DeleteConfReq, opts ...grpc.CallOption) (*DeleteConfResp, error) {
	out := new(DeleteConfResp)
	err := c.cc.Invoke(ctx, "/kv.KvService/DeleteConf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KvServiceServer is the server API for KvService service.
// All implementations must embed UnimplementedKvServiceServer
// for forward compatibility
type KvServiceServer interface {
	CreateSchema(context.Context, *CreateSchemaReq) (*CreateSchemaResp, error)
	QuerySchema(context.Context, *QuerySchemaReq) (*QuerySchemaResp, error)
	DeleteSchema(context.Context, *DeleteSchemaReq) (*DeleteSchemaResp, error)
	PutConf(context.Context, *PutConfReq) (*PutConfResp, error)
	GetConf(context.Context, *GetConfReq) (*GetConfResp, error)
	DeleteConf(context.Context, *DeleteConfReq) (*DeleteConfResp, error)
	mustEmbedUnimplementedKvServiceServer()
}

// UnimplementedKvServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKvServiceServer struct {
}

func (UnimplementedKvServiceServer) CreateSchema(context.Context, *CreateSchemaReq) (*CreateSchemaResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSchema not implemented")
}
func (UnimplementedKvServiceServer) QuerySchema(context.Context, *QuerySchemaReq) (*QuerySchemaResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySchema not implemented")
}
func (UnimplementedKvServiceServer) DeleteSchema(context.Context, *DeleteSchemaReq) (*DeleteSchemaResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSchema not implemented")
}
func (UnimplementedKvServiceServer) PutConf(context.Context, *PutConfReq) (*PutConfResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutConf not implemented")
}
func (UnimplementedKvServiceServer) GetConf(context.Context, *GetConfReq) (*GetConfResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConf not implemented")
}
func (UnimplementedKvServiceServer) DeleteConf(context.Context, *DeleteConfReq) (*DeleteConfResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConf not implemented")
}
func (UnimplementedKvServiceServer) mustEmbedUnimplementedKvServiceServer() {}

// UnsafeKvServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KvServiceServer will
// result in compilation errors.
type UnsafeKvServiceServer interface {
	mustEmbedUnimplementedKvServiceServer()
}

func RegisterKvServiceServer(s grpc.ServiceRegistrar, srv KvServiceServer) {
	s.RegisterService(&KvService_ServiceDesc, srv)
}

func _KvService_CreateSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSchemaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvServiceServer).CreateSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kv.KvService/CreateSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvServiceServer).CreateSchema(ctx, req.(*CreateSchemaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _KvService_QuerySchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySchemaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvServiceServer).QuerySchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kv.KvService/QuerySchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvServiceServer).QuerySchema(ctx, req.(*QuerySchemaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _KvService_DeleteSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSchemaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvServiceServer).DeleteSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kv.KvService/DeleteSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvServiceServer).DeleteSchema(ctx, req.(*DeleteSchemaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _KvService_PutConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutConfReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvServiceServer).PutConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kv.KvService/PutConf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvServiceServer).PutConf(ctx, req.(*PutConfReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _KvService_GetConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvServiceServer).GetConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kv.KvService/GetConf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvServiceServer).GetConf(ctx, req.(*GetConfReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _KvService_DeleteConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConfReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvServiceServer).DeleteConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kv.KvService/DeleteConf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvServiceServer).DeleteConf(ctx, req.(*DeleteConfReq))
	}
	return interceptor(ctx, in, info, handler)
}

// KvService_ServiceDesc is the grpc.ServiceDesc for KvService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KvService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kv.KvService",
	HandlerType: (*KvServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSchema",
			Handler:    _KvService_CreateSchema_Handler,
		},
		{
			MethodName: "QuerySchema",
			Handler:    _KvService_QuerySchema_Handler,
		},
		{
			MethodName: "DeleteSchema",
			Handler:    _KvService_DeleteSchema_Handler,
		},
		{
			MethodName: "PutConf",
			Handler:    _KvService_PutConf_Handler,
		},
		{
			MethodName: "GetConf",
			Handler:    _KvService_GetConf_Handler,
		},
		{
			MethodName: "DeleteConf",
			Handler:    _KvService_DeleteConf_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kv.proto",
}
